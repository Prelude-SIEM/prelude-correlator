#####
#
# Copyright (C) 2006 G Ramon Gomez <gene at gomezbrothers dot com>
# All Rights Reserved.
#
# This file is part of the Prelude-Correlator program.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
#
#####

# Detect Eventscan
# Eventscan: Playing multiple events from a single host against another single
# host

pattern = source(*).node.address(*).address: (.*); \
	  target(*).node.address(*).address: (.*); \
	  messageid: (.+); \
	  analyzer(*).analyzerid: (.*)

new_context = SCAN_EVENTSCAN_$1[*]_$2[*]; expire: 600; threshold: 30;

action = correlation_alert.alertident(>>).alertident = $3;     \
         correlation_alert.alertident(-1).analyzerid = $4[-1]; \
	 source(>>) = source;                                  \
	 target(>>) = target;

check_correlation = SCAN_EVENTSCAN_$1[*]_$2[*];

action = source(>>) = source;                                  \
	 target(>>) = target;                                  \
	 correlation_alert.alertident(>>).alertident = $3;     \
         correlation_alert.alertident(-1).analyzerid = $4[-1]; \
 	 classification.text = Eventscan;                      \
	 assessment.impact.severity = high;                    \
	 assessment.impact.description = A single host has played many events against a single target.  This may be a general vulnerability scan.; \
	 correlation_alert.name = Eventscan;                   \
	 additional_data(>>).data = ignore_atomic_event

destroy_context = SCAN_EVENTSCAN_$1[*]_$2[*]



#
# Detect Eventsweep
# Eventsweep: Playing the same event from a single host against multiple hosts
#
pattern = classification.text: (.+); \
	  source(*).node.address(*).address: (.*); \
          messageid: (.+); \
          analyzer(*).analyzerid: (.*)

new_context = SCAN_EVENTSWEEP_$1_$2[*]; expire: 600; threshold: 30

action = source(>>) = source; \
         target(>>) = target; \
	 correlation_alert.alertident(>>).alertident = $3; \
         correlation_alert.alertident(-1).analyzerid = $4[-1]

check_correlation = SCAN_EVENTSWEEP_$1_$2[*];

action = source(>>) = source;                \
	 target(>>) = target;                \
	 classification.text = Eventsweep;   \
         assessment.impact.severity = high;  \
         assessment.impact.description = A single host has played the same event against multiple targets.  This may be a network scan for a specific vulnerability.; \
         correlation_alert.name = Eventsweep; \
	 additional_data(>>).data = ignore_atomic_event

destroy_context = SCAN_EVENTSWEEP_$1_$2[*]




#
# Detect Eventstorm
# Eventsweep: Playing excessive events by a single host
#
pattern = source(*).node.address(*).address: (.*); \
          messageid: (.+);                         \
          analyzer(*).analyzerid: (.*)

new_context = SCAN_EVENTSTORM_$1[*]; expire: 600; threshold: 150

action = source(>>) = source;                                \
         target(>>) = target;                                \
         correlation_alert.alertident(>>).alertident = $2;   \
         correlation_alert.alertident(-1).analyzerid = $3[-1]

check_correlation = SCAN_EVENTSTORM_$1[*];

action = source(>>) = source;                 \
         target(>>) = target;                 \
         classification.text = Eventstorm;    \
         assessment.impact.severity = high;   \
         assessment.impact.description = A single host is producing an unusual amount of traffic.; \
         correlation_alert.name = Eventstorm; \
         additional_data(>>).data = ignore_atomic_event;

destroy_context = SCAN_EVENTSTORM_$1[*]
